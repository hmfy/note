import{_ as e,c as l,a,d as o,o as n,r as t}from"./app.eb5de290.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"可复用的组件","slug":"可复用的组件","link":"#可复用的组件","children":[]},{"level":2,"title":"文件命名","slug":"文件命名","link":"#文件命名","children":[]},{"level":2,"title":"template 部分","slug":"template-部分","link":"#template-部分","children":[]},{"level":2,"title":"script 部分","slug":"script-部分","link":"#script-部分","children":[]},{"level":2,"title":"style 部分","slug":"style-部分","link":"#style-部分","children":[]}],"relativePath":"article/vue组件开发规范.md"}'),p={name:"article/vue组件开发规范.md"},c=o(`<h2 id="可复用的组件" tabindex="-1">可复用的组件 <a class="header-anchor" href="#可复用的组件" aria-hidden="true">#</a></h2><p>解决单一的、独立的、可复用的功能，因此这一点应该作为拆分一个组件的依据</p><p>如果一个组件内容涉及到的逻辑、实现的功能特别多，代码几千行，那么这个组件需要再拆分</p><p>例如：封装需要支持弹窗的排序组件，应该有三个文件：组件入口文件、排序组件、弹窗组件</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-IoFoY" id="tab-HFYdpnq" checked="checked"><label for="tab-HFYdpnq">sort.vue</label><input type="radio" name="group-IoFoY" id="tab-Po52o6O"><label for="tab-Po52o6O">dialog.vue</label><input type="radio" name="group-IoFoY" id="tab-oktEVXr"><label for="tab-oktEVXr">dialog-sort.vue</label></div><div class="blocks"><div class="language-vue active"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        sort</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        dialog</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dialog</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">sort</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">sort</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dialog</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div></div></div><h2 id="文件命名" tabindex="-1">文件命名 <a class="header-anchor" href="#文件命名" aria-hidden="true">#</a></h2><ol><li>大驼峰命名：更方便，对于大小写不敏感的操作系统，涉及文件操作时可能有问题</li><li>全小写用横线分隔：没那么方便，但没有任何问题</li></ol><h2 id="template-部分" tabindex="-1">template 部分 <a class="header-anchor" href="#template-部分" aria-hidden="true">#</a></h2><ol><li>避免使用 <code>id</code></li><li>避免复杂的逻辑计算，只负责读取数据和显示数据，应使用 <code>computed</code> 或 <code>methods</code> 替代</li><li>避免行内样式</li><li>避免直接修改 <code>dom</code>，例如样式的修改应动态控制 <code>class</code> 或者 <code>style</code> 达到效果</li><li>二次封装必须兼容原组件写法及用法，使用 <code>v-bind=&quot;$attrs&quot;</code> 及 <code>v-on=&quot;$listeners&quot;</code></li><li><code>v-for</code> 必须要加 <code>key</code></li><li><code>v-for</code> 和 <code>v-if</code> 禁止写在同一个标签上/组件上</li><li><code>v-if</code> 和 <code>v-show</code> 应根据实际渲染情况选择使用</li></ol><h2 id="script-部分" tabindex="-1">script 部分 <a class="header-anchor" href="#script-部分" aria-hidden="true">#</a></h2><ol><li><code>props</code> 定义必须写 <code>type</code> 和 <code>default / require</code></li><li>与视图渲染无关的数据结构避免放到 <code>data</code> 里</li><li>纯逻辑计算，应适当抽离或复用，避免全放到组件内部（例如：格式化时间、拷贝、格式化树结构等）</li><li>在能够被 <code>babel</code> 转成 <code>ES5</code> 的前提下，语法用新不用旧 <ul><li>避免不断 <code>let _this = this</code> 来在子层级获取实例，用箭头函数替代</li><li>对象的方法简写等 <code>{ a: 1, getData () {} }</code></li><li>...</li></ul></li><li>禁止提交 <code>debugger</code> 及 <code>console</code></li></ol><h2 id="style-部分" tabindex="-1">style 部分 <a class="header-anchor" href="#style-部分" aria-hidden="true">#</a></h2><ol><li><code>style</code>标签必须要有<code>scoped</code>属性，对于全局的样式应该有公用的 <code>css</code></li><li>样式复用：<code>css</code> 变量、使用 <code>,</code> 给不同的选择器定义同一批样式</li><li>属性尽量简写：<code>padding: 0px 2px</code>，而不是 <code>padding-left: 2px; padding-right: 2px;...</code></li></ol>`,13);function i(d,r,F,y,D,h){const s=t("VisitLog");return n(),l("div",null,[c,a(s)])}const v=e(p,[["render",i]]);export{g as __pageData,v as default};
