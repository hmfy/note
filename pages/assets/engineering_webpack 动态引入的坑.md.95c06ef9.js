import{_ as a,c as n,a as l,d as p,o,r as e}from"./app.9feacaa1.js";const c="/note/assets/img.fb379869.png",t="/note/assets/img_1.2a32cab7.png",r="/note/assets/img_2.c7b5f60e.png",b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"webpack 动态引入","slug":"webpack-动态引入","link":"#webpack-动态引入","children":[]},{"level":2,"title":"webpack 动态引入实现原理","slug":"webpack-动态引入实现原理","link":"#webpack-动态引入实现原理","children":[]},{"level":2,"title":"publicPath","slug":"publicpath","link":"#publicpath","children":[]},{"level":2,"title":"动态引入跨工程出错原因","slug":"动态引入跨工程出错原因","link":"#动态引入跨工程出错原因","children":[]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]}],"relativePath":"engineering/webpack 动态引入的坑.md"}'),y={name:"engineering/webpack 动态引入的坑.md"},F=p(`<h2 id="webpack-动态引入" tabindex="-1">webpack 动态引入 <a class="header-anchor" href="#webpack-动态引入" aria-hidden="true">#</a></h2><p>最近在写一个公用库时，遇到一个需求：</p><p>在某个初始化函数内需要根据传参来确实初始化哪一种图表，而两种界面用到的第三方库不同</p><p>如果将两个库都引入，然后根据条件判断去执行对应库里的函数，就会造成明明只想要 A 图表，却将 B 图表需要的第三方库也打包进去</p><p>并且由于是条件判断，因此无法做树摇（<code>webpack</code> 只分析代码，不执行代码），无论如何分包，两个库都会被打包进去</p><p>于是想到，通过动态引入另外两种工具库：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">exports.</span><span style="color:#82AAFF;">init</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">echarts</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">echarts</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">import</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">echarts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;">/* webpackChunkName: &quot;echarts&quot; */</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">import</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@antv/g2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;">/* webpackChunkName: &quot;ant&quot; */</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>代码写完以后打包，发布到 <code>npm</code>，紧接着在工程内引入使用:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">init</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tools</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#82AAFF;">init</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>结果发现报错了，<code>echarts.js</code> 引入失败： <img src="`+c+`" alt="img.png"></p><p>然后一看链接路径，<code>js</code> 文件夹下确实没有这个文件</p><p>因为在打包我自己的 <code>tools</code> 时，<code>webpack</code> 将 <code>echarts</code> 单独分出来了</p><p>但是在工程中动态使用，请求的路径不对，所以导致 <code>404</code></p><h2 id="webpack-动态引入实现原理" tabindex="-1">webpack 动态引入实现原理 <a class="header-anchor" href="#webpack-动态引入实现原理" aria-hidden="true">#</a></h2><p>那么我们看一下 <code>webpack</code> 是如何得到这个路径的（部分代码已省略，仅展示与获取路径相关代码）：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* 重点在于得出 __webpack_require__.p */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* webpack/runtime/publicPath */</span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">scripts</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementsByTagName</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">script</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/*  从后往前，获取一个 src   */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">scripts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">scripts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">scriptUrl</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">scriptUrl</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">scripts</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">scriptUrl</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Automatic publicPath is not supported in this browser</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">scriptUrl</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">scriptUrl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">#.</span><span style="color:#89DDFF;">*</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\?</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">*</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\/</span><span style="color:#89DDFF;">[^</span><span style="color:#A6ACCD;">\\/</span><span style="color:#89DDFF;">]+</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* 通过正则，剔除哈希，剔除问号参数拼接，剔除文件名，最终得到前缀路径，并赋值给 __webpack_require__.p */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">p</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">scriptUrl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* 重点在于定义 __webpack_require__.l 这个函数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* 该函数传入完整的 url、chunkId 以及其它参数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* 被 __webpack_require__.f.j 函数调用</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* webpack/runtime/load script */</span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">l</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">url</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">done</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">chunkId</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// ...省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">script</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// ...省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// ...省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onerror</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onScriptComplete</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onerror</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onload</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onScriptComplete</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onload</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// ...省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">head</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">script</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* 重点在于 __webpack_require__.f.j 这个函数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* 将第一步中得到的 __webpack_require__.p 和 chunk 组合得到完整的 url</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* 然后调用 __webpack_require__.l 函数加载动态引入的库</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* webpack/runtime/jsonp chunk loading */</span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">f</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">chunkId</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">promises</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// ...省略部分代码</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 组装 URL</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">p</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">u</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">chunkId</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// ...省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">loadingEnded</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">o</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">installedChunks</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">chunkId</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// ...省略部分代码</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 之前的报错就是在这里抛出的</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errorType</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">load</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">missing</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">realSrc</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Loading chunk </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">chunkId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> failed.</span><span style="color:#A6ACCD;">\\n</span><span style="color:#C3E88D;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errorType</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">realSrc</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ChunkLoadError</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errorType</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">request</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">realSrc</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">installedChunkData</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">](</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">l</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">loadingEnded</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">chunk-</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">chunkId</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">chunkId</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>可以看出，动态加载大致的步骤：</p><ul><li>通过 <code>chunkId</code> 得到单独分包的那个库的文件名</li><li>通过最后一个有效的 <code>script</code> 上的 <code>src</code> 属性和正则获取前缀路径</li><li>将前缀路径和要加载的文件名拼接，调用相关函数加载脚本</li></ul><p>而 <code>404</code> 的原因就是出在获取 <code>__webpack_require__.p</code> 这个过程</p><p>由于默认它是去读取当前项目其它 <code>js</code> 的请求路径，然后作为 <code>echarts.js</code> 的前缀路径</p><p>而其它 <code>js</code> 一般是我们当前项目里打包出来的 <code>js</code>，一般都在一个统一的文件夹下</p><p>而这个文件夹下肯定不可能有 <code>echarts.js</code>，因为它在 <code>tools</code> 打包过程已经处理了，不会在项目中再打包一次</p><p>那么如何解决这个问题呢？最简单的方法就是直接把 <code>echarts.js</code> 放到正确的文件夹下</p><p>但是这样每次项目上打包后都要手动重新放一次，万一哪次忘记了就 gg</p><p>既然这样，那就在项目自己的 <code>webpack</code> 配置里加上 <code>CopyPlugin</code> 不就可以了</p><p>但是有一个问题，就是以后每个使用 <code>tools</code> 的项目加上这个配置</p><p>作为一个工具库，肯定是希望在保持代码结构整洁的前提下，使用的门槛越低越好，因此这样也不合适</p><p>想到是 <code>__webpack_require__.p</code> 获取的不对而出的问题，那是不是要想办法让它能获取到对的值呢</p><h2 id="publicpath" tabindex="-1">publicPath <a class="header-anchor" href="#publicpath" aria-hidden="true">#</a></h2><p>查看官网发现，<code>__webpack_require__.p</code> 之所以会通过上述的逻辑获取</p><p>是因为 <code>publicPath</code> 这个属性在 <code>targets</code> 为 <code>web</code> 时的默认值是 <code>auto</code><img src="`+t+'" alt="img_1.png"></p><p>而我们在没有设置 <code>browserslist</code> 的情况下，<code>target</code> 的默认值刚好为 <code>web</code>： <img src="'+r+'" alt="img_2.png"></p><p>所以如果我们设置正确的 <code>publicPath</code>，是不是就有可能让 <code>__webpack_require__.p</code> 是对的，从而拼接出对的路径</p><blockquote><p>设置 <code>publicPath</code> 的方式有两种：</p><ul><li><p>一种是 <code>output</code> 内打包时就配置好</p></li><li><p>另一种是通过 <code>window.__webpack_public_path__ = &#39;xxx&#39;</code> 来配置，这种可以达到动态配置的效果</p></li></ul></blockquote><p>因此尝试修改 <code>publicPath</code> 再打包试试</p><p>但是又有问题了，什么才是正确的路径呢，因为 <code>tools</code> 在打包后不清楚会被谁使用，因此正确的路径我们无法判断</p><p>因此在不对项目做任何入侵的情况下想要让这个路径正确，靠修改 <code>publicPath</code> 好像是不行</p><p>那如果在项目中使用 <code>tools</code> 时，将正确的 <code>publicPath</code> 传参过去可不可以呢</p><h2 id="动态引入跨工程出错原因" tabindex="-1">动态引入跨工程出错原因 <a class="header-anchor" href="#动态引入跨工程出错原因" aria-hidden="true">#</a></h2><p>项目中使用 <code>tools</code> 库的时候，<code>echarts.js</code> 是在 <code>node_modules</code> 中的 <code>tools</code> 文件夹内的</p><p>而在使用 <code>tools</code> 这个库的时候，由于是已经被打包的代码，因此已经完成依赖收集过程</p><p>因此在项目上使用 <code>tools</code> 时，不会再对该库里面的内容走依赖收集流程</p><p>因此项目在打包过程中不会处理 <code>echart.js</code> 这一文件</p><p>这也就意味着：</p><ul><li>在开发环境时，<code>webpack-dev-server</code> 不会将 <code>echarts.js</code> 打包进内存，因此通过 <code>dev-server</code> 开启的服务器永远无法访问到这一文件</li></ul><blockquote><p><code>webpack-dev-server</code> 主要由 <code>express</code> 、<code>webpack-dev-middleware</code> 等组成</p><p>其中 <a href="https://webpack.docschina.org/guides/development/#using-webpack-dev-middleware" target="_blank" rel="noreferrer"><code>webpack-dev-middleware</code></a> 以 <code>watch</code> 模式启动 <code>webpack</code> 并将每次打包后的内容缓存在内存中提供给服务器，为服务器提供静态资源</p><p>而如果某一个文件没有进行依赖收集，就不会打包进内存，就无法通过 <code>webpack-dev-server</code> 启动的服务器访问</p><p><code>webpack</code> 本身就支持 <code>watch</code> 模式，为何还要用另外一个插件提供静态资源给服务器呢？</p><p>因为 <code>webpack</code> 本身的 <code>watch</code> 模式每次都会生成实体文件，而 <code>webpack-dev-middleware</code> 不会生成文件，只会将其缓存在内存中（使用 <code>nodeJS</code> 的 <code>memory-fs</code> 模块）</p></blockquote><ul><li>在生产环境时，<code>echarts.js</code> 这个文件不会被单独打包进我们项目的 <code>dist</code> 目录</li></ul><p>因此可以知道，就算在使用 <code>tools</code> 时给他传参，进而修改 <code>publicPath</code>，也没有办法在项目里自动引入对应 <code>js</code></p><p>那这种动态导入就没法使用了么，很显然不是</p><p>假如我们把 <code>tools</code> 库里的代码移到我们项目里然后去执行的话，可以发现是能分别正常引入两个 <code>js</code> 的：</p><blockquote><p>首先，由于动态引入的这部分代码是由项目本身打包的，因此会进行依赖收集，并将 <code>echarts.js</code> 分包进项目的 <code>output</code> 目录</p><p>因此无论是打包后还是开发模式下，都是可以读到这个文件的，而如果不做特殊处理，<code>echarts.js</code> 必定是和项目里打包的其它 <code>js</code> 放在一起，因此拼接的路径刚好是对的</p><p>其次就算路径不对，我们也可以通过 <code>publicPath</code> 及时修正</p></blockquote><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-hidden="true">#</a></h2><p>因此我们可以假设，如果能让 <code>import(&#39;echarts&#39;)</code> 和 <code>import(&#39;@antv/g2&#39;)</code> 这部分代码原封不动放到项目里，让动态引入的库交给项目自己的打包工具处理，应该就没问题了</p><p>而想要让上述动态引入的语法不被打包，这里有两种方案：</p><ul><li>第一种方案：依然使用 <code>webpack</code></li></ul><blockquote><p>将动态引入相关的代码单独提取到一个文件内，例如叫 <code>active-code.js</code></p><p>然后在配置中增加 <code>noParse</code>，值填写 <code>active-code</code>，那么在打包 <code>tools</code> 库时，这个文件就会被略过而不被打包</p><p>但是需要注意，在库中引入自己本地的 <code>js</code> 时，不能写相对路径，而应该带上库名</p><p>例如 <code>import(&#39;tools/lib/local.js&#39;)</code>，因为引入的代码是未打包过直接交给项目处理的</p><p>同时，应该通过 <code>CopyPlugin</code> 将对应文件放入最终包的对应目录，例如 dist/lib/ 内</p><p>另外我们在开发这个库过程中，如果用了本地的 <code>js</code>，由于直接写包名（<code>tools/lib/local.js</code>）</p><p>因此肯定会 <code>import</code> 不到这个包，这时需要用 <a href="https://webpack.js.org/plugins/normal-module-replacement-plugin/" target="_blank" rel="noreferrer">NormalModuleReplacementPlugin</a> 重定向资源</p></blockquote><ul><li>第二种方案：更换打包工具，使用 <code>rollup</code></li></ul><blockquote><p>由于 <code>rollup</code> 默认构建目标就是 <code>ES6</code>，因此只需要很少的配置就可完成打包，并保留 <code>import</code> 语法</p></blockquote><p>个人是推荐使用第二种方案，<code>rollup</code> 使用见<a href="/note/engineering/rollup开发ESModule.html">rollup开发ESModule</a></p>',59);function D(i,d,A,C,u,_){const s=e("VisitLog");return o(),n("div",null,[F,l(s)])}const k=a(y,[["render",D]]);export{b as __pageData,k as default};
